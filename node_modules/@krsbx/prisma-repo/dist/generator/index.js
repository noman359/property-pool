"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generator_helper_1 = require("@prisma/generator-helper");
const internals_1 = require("@prisma/internals");
const path_1 = __importDefault(require("path"));
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const templateFile = __importStar(require("template-file"));
const assign_1 = require("../utils/assign");
const common_1 = require("../utils/common");
const constants_1 = require("../utils/constants");
const prisma_1 = require("../utils/prisma");
const writeFileSafely_1 = require("../utils/writeFileSafely");
const { version } = require('../../package.json');
(0, generator_helper_1.generatorHandler)({
    onManifest() {
        internals_1.logger.info(`${constants_1.GENERATOR_NAME}:Registered`);
        return {
            version,
            prettyName: constants_1.GENERATOR_NAME,
        };
    },
    onGenerate: async (options) => {
        const basePath = options.generator.output?.value ?? options.schemaPath;
        const rootDir = path_1.default.join(constants_1.PKG_ROOT, 'template');
        const repoTemplatePath = path_1.default.join(rootDir, 'repository.ts');
        const baseRepoTemplatePath = path_1.default.join(rootDir, 'baseRepository.ts');
        const templatePath = path_1.default.join(rootDir, 'prisma-repo.ts');
        const repoLocation = path_1.default.join(basePath, 'prisma-repo.ts');
        const baseRepoLocation = path_1.default.join(basePath, 'baseRepository.ts');
        const prismaLogger = (0, prisma_1.getPrismaLogger)(options.generator.config);
        const prismaStructures = [];
        const modelsName = [];
        const modelStructure = [];
        const modelTypes = [];
        options.dmmf.datamodel.models.forEach(async (model) => {
            (0, assign_1.assignRepositories)(prismaStructures, modelsName, modelStructure, modelTypes, model);
            const writeLocation = path_1.default.join(basePath, `${(0, lodash_camelcase_1.default)(model.name)}.ts`);
            const content = await templateFile.renderFile(repoTemplatePath, {
                repository: model.name,
                repositoryName: `MODELS_NAME.${(0, common_1.constantCase)(model.name)}`,
            });
            await (0, writeFileSafely_1.writeFileSafely)(writeLocation, content);
        });
        const content = await templateFile.renderFile(templatePath, {
            log: prismaLogger,
            prismaStructures,
            modelsName,
            modelStructure,
            modelTypes,
        });
        await Promise.all([
            (0, writeFileSafely_1.copyFile)(baseRepoTemplatePath, baseRepoLocation),
            (0, writeFileSafely_1.writeFileSafely)(repoLocation, content, true),
        ]);
    },
});
//# sourceMappingURL=index.js.map